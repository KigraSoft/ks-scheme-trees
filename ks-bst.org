#+title:   KigraSoft Binary Search Tree Library
#+startup: show4levels
#+startup: indent

Run M-x org-babel-tangle (C-c C-v t) to generate Guile Scheme code.
Mark code sections with ':tangle no' to exclude them from export.

* About

Use :tangle-mode o755 for executable scripts

* ks-bst.scm
:PROPERTIES:
:header-args:scheme: :tangle ks-bst.scm
:END:

** General setup code and program description

*** Preamble

#+begin_src scheme

  ;; -*- mode: scheme -*-
  #|
  # KigraSoft Binary Search Tree Library (ks-bst)
  # version 0.1
  #
  # Description: Qwerty...
  #
  # Usage: (import (ks-bst))
  #
  # NOTE: This file is generated from ks-bst.org.  Any updates to the
  #       code should be made to that file.
  |#

#+end_src

*** Library init, imports and exports

The library is single, self contained form.  This section begins the
form, imports the necessary libraries, and declares the library
exports.  It needs a matching at the end of the library code to close
out the form.  Note the Guile implementation limits library
definitions to one per file. (I have not tested this myself.)

#+begin_src scheme

  (define-library (ks-bst)
    (import (scheme base))
    (import (scheme write))
    (import (srfi srfi-9))
    (export make insert print)
    (begin

#+end_src

** Library definition

*** BST Variable Structure

The BST variable returned by make is a cons pair.

The components of the list are interpreted as:
- Key type - Intended: either 'int 'str or a custom option
  At the moment the library only supports integer keys but will be expanded in the future
- Root node - The next code section defines a node record type
  
**** FUNC: make - BST Initialization

#+begin_src scheme

  (define (make)
    (cons 'int '()))
  
#+end_src

*** Node Constructor

BST nodes are record type.  The implemenation here uses the Guile
manual's description of r6rs records (which it recommends as the best
record option).  I think this is the same as r7rs records, but I have
not verified that yet.

Record components:
- key   - index which determines where the node is inserted
- root  - a pointer back to root node of this node (aka parent Node)
- left  - Left Branch Node (key is smaller)
- right - Right Branch Node (key is greater)
- Datum - The 'payload' of the tree structure.
          Ideally this should not care about what kind of data is passed in

**** DECL: node record

  #+begin_src scheme

    (define-record-type <node>
      (make-node key root left right datum)
      node?
      (key    node-key)
      (root   node-root   set-node-root!)
      (left   node-left   set-node-left!)
      (right  node-right  set-node-right!)
      (datum  node-datum))

  #+end_src

**** FUNC: new-node

This main function to create a new node with no branch nodes.
(get-node-key is probably not necessary but need to eliminate it from rest of code before deleting)

#+begin_src scheme

  (define (new-node key datum root)
    (make-node key root '() '() datum))

  (define (get-node-key node)
    (node-key node))

#+end_src

*** BST Insertion

Should be relatively standard binany search tree insertion algorithm.
The calling code needs to provide the result of the make function
(which includes the tree type and root node), the key for the inserted
datum, and the datum.  Presumably the key is contained in the datum,
but it is up to the calling code to pull out the key for insertion
into the BST.

**** FUNC: insert

#+begin_src scheme

  (define (insert bst key datum)
    (if (null? (cdr bst))
        (set-cdr! bst (new-node key datum '()))
        (let tree-insert ((tree-root (cdr bst)))
          (cond ((> (get-node-key tree-root) key)
                 (if (null? (node-left tree-root))
                     (set-node-left! tree-root (new-node key datum tree-root))
                     (tree-insert (node-left tree-root))))
                ((< (get-node-key tree-root) key)
                 (if (null? (node-right tree-root))
                     (set-node-right! tree-root (new-node key datum tree-root))
                     (tree-insert (node-right tree-root))))))))

#+end_src

*** print - BST Print Tree

Print functions for displaying the BST structure.  These are mainly
for diagnostics and testing.  (At the momement only a print of the
tree structure is implemented.  Need to at least also do an ordered
traversal)

**** FUNC: print

#+begin_src scheme

  (define (print bst)
    (begin
      (print-tree (cdr bst))
      (newline)))

#+end_src

**** FUNC: print-tree

#+begin_src scheme

  (define (print-tree root-node)
    (let ((print-node (lambda (current-node line-prefix)
                        (display line-prefix)
                        (display (node-key current-node))
                        (display " - ")
                        (display (node-datum current-node))
                        (newline))))
      (print-node root-node "")
      (let print-current-tree ((current-root root-node)
                               (current-prefix "->  "))
        (if (not (null? (node-left current-root)))
            (begin
              (print-node (node-left current-root) current-prefix)
              (print-current-tree (node-left current-root) (string-append "    " current-prefix))))
        (if (not (null? (node-right current-root)))
            (begin
              (print-node (node-right current-root) current-prefix)
              (print-current-tree (node-right current-root) (string-append "    " current-prefix)))))))

#+end_src

** Close library file

Necessary to complete the define-library form begun at the top of the file.

*** Close library file

#+begin_src scheme

  ))
  
#+end_src

* Tests

** ks-bst-test-01.scm
:PROPERTIES:
:header-args:scheme: :tangle ks-bst-test-01.scm :tangle-mode o755
:END:

#+begin_src scheme

  #!/usr/bin/env sh
  # -*- mode: scheme -*-
  exec guile --r7rs -e main -s "$0" "$@"
  !#

  (add-to-load-path (dirname (current-filename)))

  (import (ks-bst))

  (define tst (make))

  (define (main args)
    (define datum1 '(1 '("test1" "test11")))
    (define datum2 '(2 '("test2" "test22")))
    (define datum3 '(3 '("test3" "test33")))
    (define datum4 '(4 '("test4" "test44")))
    (define datum5 '(5 '("test5" "test55")))
    (insert tst 1 datum1)
    (print tst)
    (insert tst 2 datum2)
    (insert tst 3 datum3)
    (insert tst 4 datum4)
    (insert tst 5 datum5)
    (print tst))

#+end_src

** ks-bst-test-02.scm
:PROPERTIES:
:header-args:scheme: :tangle ks-bst-test-02.scm :tangle-mode o755
:END:

#+begin_src scheme

  #!/usr/bin/env sh
  # -*- mode: scheme -*-
  exec guile --r7rs -e main -s "$0" "$@"
  !#

  (add-to-load-path (dirname (current-filename)))

  (import (ks-bst))

  (define tst (make))

  (define (main args)
    (insert tst 6 "test6")
    (insert tst 1 "test1")
    (insert tst 7 "test7")
    (insert tst 3 "test3")
    (insert tst 4 "test4")
    (insert tst 8 "test8")
    (insert tst 9 "test9")
    (insert tst 0 "test0")
    (insert tst 2 "test2")
    (insert tst 5 "test5")
    (print tst))

#+end_src
